package com.fino;

import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;

public class WebDriverCommon extends LoadPropertyFile{
	
public static LoginPage logInPage;
	
	public static WebDriver driver;
	public static Properties commPropPSN = new LoadPropertyFile().readPropertyFile("common.properties");
	public static String browser = commPropPSN.getProperty("browserFF");
	public static String time1, time2;
	private static final String hoursToRunIteration = commPropPSN.getProperty("hoursToRunIteration");
	public static final String numberOfLogInAttempts = commPropPSN.getProperty("numberOfLogInAttempts");
	SimpleDateFormat format1 = new SimpleDateFormat("HH-mm-ss");

	public void launchWebDriver(String browser)
	{	
		/* Launch Browser */
		if(browser.equals("firefox"))
			driver = new FirefoxDriver();
		else if(browser.equals("ie"))
		{
			DesiredCapabilities capabilities = DesiredCapabilities.internetExplorer();
			capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
			File file = new File("D:\\Anita\\WorkSpace\\WebDriverDemoICICI\\lib\\IEDriverServer.exe");
			System.setProperty("webdriver.ie.driver", file.getAbsolutePath());
            driver = new InternetExplorerDriver(capabilities);
		}
		/* Set Browser URL */
		driver.get(commPropPSN.getProperty("ICICICorporateURL"));

		/* Wait for Page to load and maximize the window */
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(120, TimeUnit.SECONDS);
		driver.manage().window().maximize();		
	}
	
/*	private Object getProperty(String string) {
		// TODO Auto-generated method stub
		return null;
	}*/

	public void launchWebDriverWithProfile(String browser, String URL)
	{	
		/* Launch Browser */
		FirefoxProfile profile = new FirefoxProfile();
        profile.setPreference("browser.download.folderList", 2);
        // 0 = desktop, 1 = default download folder , 2 = user defined location.
        profile.setPreference("browser.download.manager.showWhenStarting",false);
        profile.setPreference("browser.download.dir", "D:\\Anita\\WorkSpace\\WebDriverDemoSAP\\TestData\\Downloads");
        profile.setPreference("browser.helperApps.neverAsk.saveToDisk","text/csv,application/vnd.ms-excel;charset=euc-kr");
        //text/csv,application/vnd.ms-excel;charset=euc-kr
        //text/csv,application/csv,application/vnd.ms-excel
        driver = new FirefoxDriver(profile); 
		
		/* Set Browser URL */
		driver.get(URL);

		/* Wait for Page to load and maximize the window */
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(120, TimeUnit.SECONDS);
		driver.manage().window().maximize();		
	}
	
	public void launchWebDriverWithProfileForTXT(String browser, String URL)
	{	
		/* Launch Browser */
		FirefoxProfile profile = new FirefoxProfile();
        profile.setPreference("browser.download.folderList", 2);
        // 0 = desktop, 1 = default download folder , 2 = user defined location.
        profile.setPreference("browser.download.manager.showWhenStarting",false);
        profile.setPreference("browser.download.dir", "D:\\Anita\\WorkSpace\\WebDriverDemoSAP\\TestData\\Downloads");
        profile.setPreference("browser.helperApps.neverAsk.saveToDisk",
        		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;"//MIME types Of MS Excel File.
        + "text/vnd.abc;text/html;text/x-asm;text/asp;text/x-c;application/pdf;" //MIME types Of PDF File.
        + "application/vnd.openxmlformats-officedocument.wordprocessingml.document;" //MIME types Of MS doc File.
        + "text/plain;text/x-script.csh;text/css;" //MIME types Of text File.
        + "text/csv;"
        + "text/plain;text/xml;text/csv;text/plain;text/log;application/zlib;application/x-gzip;application/x-compressed;application/x-gtar;multipart/x-gzip;application/tgz;application/gnutar;application/x-tar;application/gzip");
        profile.setPreference( "browser.download.manager.showWhenStarting", false );
        profile.setPreference( "pdfjs.disabled", true );
        profile.setPreference( "pdfjs.firstRun", false );
      //  profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "text/xml, text/csv, text/plain, text/log, application/zlib, application/x-gzip, application/x-compressed, application/x-gtar, multipart/x-gzip, application/tgz, application/gnutar, application/x-tar, application/gzip");
        //text/csv,application/csv,application/vnd.ms-excel
        driver = new FirefoxDriver(profile); 
		
		/* Set Browser URL */
		driver.get(URL);

		/* Wait for Page to load and maximize the window */
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(120, TimeUnit.SECONDS);
		driver.manage().window().maximize();		
	}

	
	public static void waitForElement(By by, int timeOutSecs) throws Exception {		
		int counter = 0;
		while(counter<timeOutSecs)
		{						
			if (isElementPresent(driver, by))
            {
                System.out.println("Waited for " + counter + " secs for element to get displayed");
            	return;
            }
			else 
			{
				Thread.sleep(1000);
				counter++;
			}			
			System.out.println("Counter Count"+counter);
		}
		
		System.out.println("TimeOut Error: Element did not load in time");
	}
	
	public static boolean isElementPresent(WebDriver driver, By by){
		try{
				driver.findElement(by);
				return true;
		}catch(NoSuchElementException e){
			return false;
		}
	}
	
	public void switchToWindow(String parent) throws Exception
	{
		Set<String> windowHandles = driver.getWindowHandles();
		if(windowHandles.size() <= 1)
		{
			Thread.sleep(2000);
			windowHandles = driver.getWindowHandles();
		}
		for (String winId : windowHandles)
		{
			if(!parent.equals(winId))
				driver.switchTo().window(winId);							
		}
	}
	
	public void takeSnap(String filename) {
		Reporter.log("Snapshot code is commented now");
	}
	
	public void closeAlertAndGetItsText(boolean acceptNextAlert) {
	     try {
	         Alert alert = driver.switchTo().alert();
	         if (acceptNextAlert) {
	            alert.accept();
	         } else {
	            alert.dismiss();
	         }
	      } catch (Exception ex) {
	    	   ex.printStackTrace();
    	  } finally {
	         acceptNextAlert = true;
	      }
	   }
	
	public void takeCurrentTime() throws Exception
	{
		Calendar cal = Calendar.getInstance();
		Date date = cal.getTime();             
		time1 = format1.format(date);

		cal.add(Calendar.HOUR_OF_DAY, Integer.valueOf(hoursToRunIteration));
		date = cal.getTime();
		time2 = format1.format(date);
		System.out.println("In function - time1=" + time1);
		System.out.println("In function - time2=" +time2);
	}

	public boolean checkTimeElapsed() throws Exception
	{ 
		Calendar cal = Calendar.getInstance();
		Date date = cal.getTime();             
		String time3 = format1.format(date);
		Date date3 = format1.parse(time3);
		Date date1 = format1.parse(time1);
		long difference = (date3.getTime() - date1.getTime())  / (60 * 60 * 1000) % 24; 
        if (difference < Integer.valueOf(hoursToRunIteration))
		  return true;
        else return false;
	}
	
	public void writeLogsIntoFile(String fileName, String linesToWrite)
	{
		try
			{
		 	   /* Create file */
		 		FileWriter newFile= new FileWriter("D:\\AutomationLogs\\"+fileName);
			    BufferedWriter result = new BufferedWriter(newFile);
				result .write(linesToWrite);
				
				/* Close the output stream */
	  			result.close();
	  			
	  			System.out.println("\nLog file is created with name:" + fileName);
	  			Reporter.log("Log file is created with name:" + fileName);
		 		}catch (Exception e)
				{
	 				System.err.println("Error: " + e.getMessage());
	 			}
  	}
	
	public boolean closeAlert(String alertMessage) throws Exception
	{
		boolean alertPresent = false;
		try{
		WebDriverWait wait = new WebDriverWait(driver, 10);
    	if(! (wait.until(ExpectedConditions.alertIsPresent())==null))
    	 { 
    		alertPresent = true;
    		Alert alert = driver.switchTo().alert();
    		alert.accept();
    		driver.switchTo().defaultContent();
    	 } else alertPresent = false;
    	return alertPresent;
	}catch(Exception e){return alertPresent;}
	}


}
